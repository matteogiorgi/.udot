#!/usr/bin/env bash


CODE="code"
FOLDER="Code"


if [[ ! -x "$(command -v $CODE)" ]]; then
    printf "$CODE not installed\n"
    exit 1
fi

read -p "Resetting VSCode, enter to continue ... "


### Remove extensions, add VSpaceCode
#####################################

LIST=$(code --list-extensions)
for EXTENSION in $LIST; do
    $CODE --uninstall-extension $EXTENSION
done

$CODE --install-extension vspacecode.vspacecode


### Reset VSCode settings
#########################

cat 2>/dev/null > $HOME/.config/$FOLDER/User/settings.json <<-EOF
{
    "keyboard.dispatch": "keyCode",
    "breadcrumbs.enabled": false,
    "telemetry.telemetryLevel": "off",
    "window.menuBarVisibility": "hidden",
    "window.restoreWindows": "none",
    "editor.fontFamily": "'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace",
    "editor.fontLigatures": true,
    "editor.fontSize": 12,
    "editor.guides.indentation": false,
    "editor.minimap.enabled": false,
    "editor.rulers": [],
    "editor.folding": false,
    "editor.cursorBlinking": "solid",
    "editor.renderLineHighlight": "none",
    "editor.lineHeight": 1.2,
    "editor.scrollbar.horizontal": "hidden",
    "editor.scrollbar.horizontalScrollbarSize": 0,
    "editor.scrollbar.vertical": "hidden",
    "editor.scrollbar.verticalScrollbarSize": 0,
    "terminal.integrated.fontFamily": "'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace",
    "terminal.integrated.fontSize": 13,
    "workbench.startupEditor": "none",
    "workbench.colorTheme": "Default Dark+",
    "workbench.activityBar.visible": false,
    "workbench.sideBar.location": "right",
    "workbench.editor.enablePreview": false,
    "workbench.list.openMode": "doubleClick",
    "workbench.tree.renderIndentGuides": "none",
    "workbench.tree.indent": 20,
    "vim.easymotion": true,
    "vim.useSystemClipboard": true,
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": ["<space>"],
            "commands": ["vspacecode.space"]
        },
        {
            "before": [","],
            "commands": [
                "vspacecode.space",
                {
                    "command": "whichkey.triggerKey",
                    "args": "m"
                }
            ]
        }
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        {
            "before": ["<space>"],
            "commands": ["vspacecode.space"]
        },
        {
            "before": [","],
            "commands": [
                "vspacecode.space",
                {
                    "command": "whichkey.triggerKey",
                    "args": "m"
                }
            ]
        }
    ]
}
EOF

cat 2>/dev/null > $HOME/.config/$FOLDER/User/keybindings.json <<-EOF
[
    {
        "key": "space",
        "command": "vspacecode.space",
        "when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
    },
    {
        "key": "space",
        "command": "vspacecode.space",
        "when": "sideBarFocus && !inputFocus && !whichkeyActive"
    },
    {
        "key": "tab",
        "command": "extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
    },
    {
        "key": "tab",
        "command": "-extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },
    {
        "key": "y",
        "command": "-magit.show-refs"
    },
    {
        "key": "y",
        "command": "vspacecode.showMagitRefMenu",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+h",
        "command": "file-browser.stepOut",
        "when": "inFileBrowser"
    },
    {
        "key": "ctrl+l",
        "command": "file-browser.stepIn",
        "when": "inFileBrowser"
    }
]
EOF

printf "Done\n"
