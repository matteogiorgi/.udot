#!/usr/bin/env bash
#--------------------------#
#  ██      ██████  ██████  #
#  ██████    ██    ████    #
#  ██████    ██    ██████  #
#__________________________#
# bash text editor
# cos.... Why the fuck not?

# Terminal Functions
###################################################################################################
setup_terminal() {
    #* Code yoinked from fff( https://github.com/dylanaraps/fff )
    # Setup the terminal for the TUI.
    # '\e[?1049h': Use alternative screen buffer.
    # '\e[?7l':    Disable line wrapping.
    # '\e[?25l':   Hide the cursor.
    # '\e[2J':     Clear the screen.
    # '\e[1;Nr':   Limit scrolling to scrolling area.
    #              Also sets cursor to (0,0).
    printf '\e[?1049h\e[?7l\e[2J\e[1;%sr' "$max_lines"

    # Hide echoing of user input
    stty -echo
}

reset_terminal() {
    #* Code yoinked from fff( https://github.com/dylanaraps/fff )
    # Reset the terminal to a useable state (undo all changes).
    # '\e[?7h':   Re-enable line wrapping.
    # '\e[?25h':  Unhide the cursor.
    # '\e[2J':    Clear the terminal.
    # '\e[;r':    Set the scroll region to its default value.
    #             Also sets cursor to (0,0).
    # '\e[?1049l: Restore main screen buffer.
    printf '\e[?7h\e[?25h\e[2J\e[;r\e[?1049l'

    # Show user input.
    stty echo
}

clear_screen() {
    #* Code yoinked from fff( https://github.com/dylanaraps/fff )
    # Only clear the scrolling window (dir item list).
    # '\e[%sH':    Move cursor to bottom of scroll area.
    # '\e[9999C':  Move cursor to right edge of the terminal.
    # '\e[1J':     Clear screen to top left corner (from cursor up).
    # '\e[2J':     Clear screen fully (if using tmux) (fixes clear issues).
    # '\e[1;%sr':  Clearing the screen resets the scroll region(?). Re-set it.
    #              Also sets cursor to (0,0).
    printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
           "$((LINES-2))" "${TMUX:+\e[2J}" "$max_lines"
}

get_term_size() {
    #* Code yoinked from fff( https://github.com/dylanaraps/fff )
    # Get terminal size ('stty' is POSIX and always available).
    # This can't be done reliably across all bash versions in pure bash.
    read -r LINES COLUMNS < <(stty size)

    # Max list items that fit in the scroll area.
    ((max_lines=LINES-3))
}

# BTE functions
###################################################################################################
print_ERR_and_die() {
    #* Thank you whetu

    # Print error message to stderr
    printf -- '\e[38;5;9m%s\e[m\n'\
              "$1" >&2
    exit 1
}

status_line() {
    # '\e7'        : Save cursor position.
    #                This is more widely supported than '\e[s'.
    # '\e[%sH'     : Move cursor to bottom of the terminal.
    # '\e[30;41m'  : Set foreground and background colors.
    # '%*s'        : Insert enough spaces to fill the screen width.
    #                This sets the background color to the whole line
    #                and fixes issues in 'screen' where '\e[K' doesn't work.
    # '\r'         : Move cursor back to column 0 (was at EOL due to above).
    # '\e[m'       : Reset text formatting.
    # '\e[%sH\e[K' : Clear line below status_line.
    # '\e8'        : Restore cursor position.
    #                This is more widely supported than '\e[u'.

    buffer_name="${file_name:-New Buffer}"
    (( modified == 1 )) && buffer_name+="*"
    counter="Ln $((file_line+1)), Col $((file_column+1))"

    printf "\e7\e[%sH%s%*s%s\e[%sH\e[K\e8"\
            "$((LINES-1))"\
            "[$buffer_name]"\
            "$((COLUMNS-${#buffer_name}-${#counter}-4))" ""\
            "[$counter]"\
            "$LINES"

}

draw_line() {
    # BTE doesnt wrap lines. Hence it has to
    # display part of a line depending on the
    # file_column position.
    #
    # There are 4 possible cases that need to be handled
    # to display a line properly.
    #
    #             COLUMNS
    #     |<--------------------->|
    #   I 1234567890
    #  II 123456789012345678901234>
    # III <23456789012345678901234>
    #  IV <234567890
    #
    # Where COLUMNS is terminal width
    #
    # Case I:
    #       The length of the line is smaller than or equal
    #       to the COLUMNS
    #
    # Case II:
    #       The length of the line is greater than the
    #       COLUMNS and
    #       The file_column position of at which the cursor is ,
    #       is smaller than (COLUMNS-2).
    #
    # Case III:
    #       The length of the line is greater than the
    #       terminal width and the file_column position is somewhere
    #       in the middle of the line
    #
    # Case IV:
    #       The length of the line is greater than the
    #       terminal width but the file_column position is near
    #       the end of the line
    #

    local curr=$file_line

    [[ -n $1 ]] && {
        curr=$*
    }

    # \e[2K : Clear current line
    # \r    : Move cursor back to column 0 (was at EOL due to above).
    printf '\e[2K\r'

    # Case I
    # Just print the entire line
    if (( ${#file_data[curr]} <= COLUMNS )); then
        printf "%s" "${file_data[curr]}"

    # Case II
    elif (( curr != file_line || file_column < (COLUMNS-2) )); then
            printf "%s\e[30;41m%s\e[m" \
                    "${file_data[curr]:0:$((COLUMNS-1))}"\
                    ">"
    else
        local p=$(( (file_column-COLUMNS+2) / (COLUMNS-5) ))
        local line_break_start=$(( ( p*(COLUMNS-5) )+(COLUMNS-2) ))
        local line_break_end=$(( x_start+COLUMNS-5 ))

        # Case III
        if (( ${#file_data[curr]} < x_end )); then
            printf "\e[30;41m%s\e[m%s" \
                    "<" \
                    "${file_data[curr]:$((line_break_start-2)):$line_break_end}"

        # Case IV
        else
            printf "\e[30;41m%s\e[m%s\e[30;41m%s\e[m" \
                    "<" \
                    "${file_data[curr]:$((line_break_start-2)):$((line_break_end+1))}" \
                    ">"
        fi
    fi
}

draw_page() {
    local old_max_lines=$((page_end-page_start))
    local diff=$((max_lines-old_max_lines))

    # Screen size has decreased
    if (( diff < 0 )); then
        # If the cursor postition is within the scrolling area
        (( terminal_row <= max_lines )) && {
            page_end=$((max_lines+page_start))
        }

        # If the cursor position is outside of the scrolling area
        (( terminal_row > max_lines )) && {
            page_end=$((file_line+1))
            page_start=$((page_end-max_lines))
        }

    # Screen size has increased
    elif (( diff > 0 )); then

        # If the files length is bigger than scroll area
        (( total_lines > max_lines )) && {
            # The code below attempts to display the previously
            # visible lines in the middle of the scroll area
            # with the remaining space filled with available
            # lines from file

            # top_offset : The number of lines that will be added to
            #              the top of the previously displayed lines
            # bot_offset : The number of lines that will be added to
            #              the bottom of the previously displayed lines

            local top_offset=$((diff/2))
            local bot_offset=$(( (diff/2)+(diff%2) ))

            # If there arent enough lines in the file above
            # page_start to cover the top region
            if (( page_start <= top_offset )); then
                page_start=0
                page_end=$((page_end+top_offset))

            # If there are enough lines in the file above
            # page_start to cover the top region
            else
                page_start=$((page_start-top_offset))
            fi

            page_end=$((page_end+bot_offset))
        }

        # If the files length is smaller than scroll area
        (( total_lines <= max_lines )) && {
            page_start=0
            page_end=$((max_lines))
        }
    fi


    for ((i=page_start;i<page_end;i++)); do
            draw_line "$i"
            (( i+1 < page_end )) && printf "\n"
    done
}

sync_cursor() {
    # Sync terminal_row position
    terminal_row=$((file_line-page_start+1))

    # file_column value check
    # If prev_line_column is greater than the length of the current file_line.
    # The value of file_column is set to the end of the line
    if (( prev_line_column >= ${#file_data[file_line]} )); then
        file_column=$((${#file_data[file_line]}-1))

    # If prev_line_column is smaller than or equal to the length
    # of the current file_line'th line
    else
        file_column=$prev_line_column
    fi

    if (( file_column < (COLUMNS-2) || ${#file_data[file_line]} <= COLUMNS )); then
        terminal_column=$((file_column+1))
    else
        local p=$(( (file_column-COLUMNS+2) / (COLUMNS-5) ))
        local x_start=$(( (p*(COLUMNS-5) ) + (COLUMNS-2) ))
        local x_end=$(( x_start+COLUMNS-5 ))

        terminal_column=$(( file_column-x_start+4 ))
    fi

    # move cursor to position terminal_column,terminal_row
    printf '\e[%s;%sH' "$terminal_row" "$terminal_column"

}

redraw() {
    clear_screen
    draw_page
    sync_cursor
    status_line
}

# Text Navigation
###################################################################################################
move_up() {
    # '\e[1L' : Insert a line above the cursor.
    # '\e[A'  : Move cursor up a line.
    # '\e[2K' : Clear current line

    # If cursor isn't at the top of the file move up
    (( file_line > 0 )) && {
        # redraw current line from the beginning 
        file_column=0
        draw_line
        file_column=$prev_line_column

        ((file_line--))

        if (( terminal_row > 1 )); then
            printf '\e[A\e2K'
        else
            printf '\e[1L'
            ((page_start--))
            ((page_end--))
        fi

        draw_line
        sync_cursor
        status_line
    }
}

move_down() {
    # '\e[B'  : Move cursor down a line.
    # '\e[2K' : Clear current line

    # If cursor isn't at the bottom of the file move down
    (( file_line+1 < total_lines )) && {
        # redraw current line from the beginning 
        file_column=0
        draw_line
        file_column=$prev_line_column

        ((file_line++))

        if (( terminal_row < max_lines )); then
            printf '\e[B\e[2K'
        else
            printf '\n'
            ((page_start++))
            ((page_end++))
        fi

        draw_line
        sync_cursor
        status_line
    }
}

move_left() {
    if (( file_column > 0 )); then
        ((file_column--))
        prev_line_column=$file_column
        draw_line
        sync_cursor
        status_line
    else
        file_column=$(( ${#file_data[file_line-1]}-1 ))
        prev_line_column=$file_column
        move_up
    fi
}

move_right() {
    if (( file_column+1 < ${#file_data[file_line]} )); then
        ((file_column++))
        prev_line_column=$file_column
        draw_line
        sync_cursor
        status_line
    elif (( file_line+1 < total_lines )); then
        file_column=0
        prev_line_column=$file_column
        move_down
    fi
}

# Undo/Redo Stack Function
###################################################################################################
undo() {
    
    (( ${#undo_stack} == 0 )) && {
        return
    }

    (( modified=1 ))

    # Variables to store top most block
    local action
    local block_column block_row
    local data


    # Read top block of undo stack
    action=${undo_stack[1]:5}

    old_IFS=$IFS
    IFS=" " read -rs block_column block_row <<< "${undo_stack[2]:5}"
    IFS=$old_IFS

    data=${undo_stack[3]:5}

    # Undo said action
    case "$action" in
        "INS")
            local fore="${file_data[block_row]::block_column}"
            local aft="${file_data[block_row]:block_column+${#data}}"
            file_data[block_row]="$fore$aft"
            ((file_column=block_column))
            ((file_line=block_row))
        ;;

        "DEL"|\
        "BCK")
            local fore="${file_data[block_row]::block_column}"
            local aft="${file_data[block_row]:block_column}"
            file_data[block_row]="$fore$data$aft"
            ((file_column=${#fore}+${#data}))
            ((file_line=block_row))
        ;;

        "L_B")
            file_data=(
                "${file_data[@]::block_row}" \
                "${file_data[block_row]::-1}${file_data[block_row+1]}" \
                "${file_data[@]:block_row+2}" \
            )
            ((file_column=block_column))
            ((file_line=block_row))
        ;;

        "L_J")
            file_data=(
                "${file_data[@]::block_row}"
                "${file_data[block_row]::block_column} "
                "${file_data[block_row]:block_column}"
                "${file_data[@]:block_row+1}"
            )
            ((file_column=0))
            ((file_line=block_row+1))
        ;;
    esac

    ((prev_line_column=file_column))

    # popping block from undo_stack
    undo_stack=("${undo_stack[@]:4}")

    # pushing the popped block into redo stack 
    redo_stack=( 
        "<--REDO_BLOCK-->"
        "ACTN:$action"
        "CRSR:$block_column $block_row"
        "DAYA:$data"
        "${redo_stack[@]}"
    )


    # display
    if (( page_start > file_line || page_end <= file_line )); then
        local p=$((file_line/max_lines))
        page_start=$((p*max_lines))
        page_end=$((page_start+max_lines))
    fi

    redraw

}

redo() {
    (( ${#redo_stack} == 0 )) && {
        return
    }

    # Variables to store top most block
    local action
    local block_column block_row
    local data


    # Read top block of undo stack
    action=${redo_stack[1]:5}

    old_IFS=$IFS
    IFS=" " read -rs block_column block_row <<< "${redo_stack[2]:5}"
    IFS=$old_IFS

    data=${redo_stack[3]:5}

    # Undo said action
    case "$action" in
        "INS")
            local fore="${file_data[block_row]::block_column}"
            local aft="${file_data[block_row]:block_column}"
            file_data[block_row]="$fore$data$aft"
            ((file_column=${#fore}+${#data}))
            ((file_line=block_row))
        ;;

        "DEL"|\
        "BCK")
            local fore="${file_data[block_row]::block_column}"
            local aft="${file_data[block_row]:block_column+${#data}}"
            file_data[block_row]="$fore$aft"
            ((file_column=block_column))
            ((file_line=block_row))
        ;;

        "L_B")
            file_data=(
                "${file_data[@]::block_row}"
                "${file_data[block_row]::block_column} "
                "${file_data[block_row]:block_column}"
                "${file_data[@]:block_row+1}"
            )
            ((file_column=0))
            ((file_line=block_row+1))
        ;;

        "L_J")
            file_data=(
                "${file_data[@]::block_row}" \
                "${file_data[block_row]::-1}${file_data[block_row+1]}" \
                "${file_data[@]:block_row+2}" \
            )
            ((file_column=block_column))
            ((file_line=block_row))
        ;;
    esac

    ((prev_line_column=file_column))

    # popping block from redo_stack
    redo_stack=("${redo_stack[@]:4}")

    # pushing the popped block into undo stack 
    undo_stack=( 
        "<--REDO_BLOCK-->"
        "ACTN:$action"
        "CRSR:$block_column $block_row"
        "DAYA:$data"
        "${undo_stack[@]}"
    )


    # display
    (( page_start > file_line || page_end <= file_line )) && {
        local p=$((file_line/max_lines))
        page_start=$((p*max_lines))
        page_end=$((page_start+max_lines))
    }

    redraw
}

mergeable_action_check() {
    ((mergeable_block=0))

    (( ${#undo_stack} == 0 )) && {
        return
    }

    [[ "${undo_stack[1]:5}" != "$1" ]] && {
        return
    }

    [[ "BCK DEL" == *$1* && ${undo_stack[2]:5} == "$file_column $file_line" ]] && {
        ((mergeable_block=1))
    }

    [[ "INS" == "$1" && \
       ${undo_stack[2]:5} == "$((file_column-${#undo_stack[3]}+5)) $file_line" ]] && {
        ((mergeable_block=1))
    }

}

add_action_to_undo_stack() {
    # $1 :  This will hold ACTN
    # $2 :  This will hold a secondary action for cases like a LINE JOIN 
    #      invoked by DELETE or BACKSPACE
    #       In other cases it will hold the charater needed to be stored
    #      for ACTIONs like INSERT, BACKSPACE, DELETE

    local action="$1"

    # Check if the new action block is mergeable
    mergeable_action_check "$action"

    (( mergeable_block==0 )) && {
        local cursor="CRSR:$file_column $file_line"
        local data="DATA:"

        [[ "INS DEL" == *$action* ]] && {
            data+="$2"
        }

        [[ "BCK" == "$action" ]] && {
            cursor="CRSR:$((file_column-1)) $file_line"
            data+="$2"
        }

        [[ "L_J" == "$action" && "BCK" == "$2" ]] && {
                cursor="CRSR:$((${#file_data[file_line-1]}-1)) $((file_line-1))"
        }

        undo_stack=( "<--UNDO_BLOCK-->" \
                     "ACTN:$action" \
                     "$cursor" \
                     "$data" \
                     "${undo_stack[@]}" )

    }

    (( mergeable_block==1 )) && {
        
        [[ "INS DEL" == *$action* ]] && {
            undo_stack[3]+=$2
        }

        [[ "BCK" == "$action" ]] && {
            undo_stack[2]="CRSR:$((file_column-1)) $file_line"
            undo_stack[3]="DATA:$2${undo_stack[3]:5}"
        }

    }

    # emptying redo stack
    redo_stack=()
}

# Text Modification
###################################################################################################
insert_character() {
    # Add action to undo stack
    add_action_to_undo_stack "INS" "$1"

    local fore="${file_data[file_line]::file_column}"
    local aft="${file_data[file_line]:file_column}"
    file_data[$file_line]="$fore$1$aft"
    ((file_column++))
    prev_line_column=$file_column
}

line_break() {
     # Add action to undo stack
    add_action_to_undo_stack "L_B"

    # Inserting additional line
    file_data=( "${file_data[@]::file_line}" \
                "${file_data[file_line]::file_column} " \
                "${file_data[file_line]:file_column}" \
                "${file_data[@]:file_line+1}" )

    ((file_line++))
    ((file_column=0))
    ((prev_line_column=0))
    ((total_lines++))

    # Incase newline is invoked at the bottom of the scroll region
    # push everything up one line and print the generated newline
    (( terminal_row == max_lines )) && {
        draw_line "$((file_line-1))"
        printf '\n'
        draw_line
        ((page_start++))
        ((page_end++))
    }

    # Incase newline is invoked anywhere else in the scroll region
    # push everything below the cursor down one line
    # and print the generated newline
    (( terminal_row < max_lines )) && {
        draw_line
        printf '\e[1L'
        draw_line "$((file_line-1))"
    }
}

back_space() {

    # If backspace is used at the start of the line
    (( file_column == 0 )) && {
        (( file_line < 1 )) && return;

        # Add action to undo stack
        add_action_to_undo_stack "L_J" "BCK"

        ((file_column=${#file_data[file_line-1]}-1))
        ((prev_line_column=${#file_data[file_line-1]}-1))

        file_data=( "${file_data[@]::file_line-1}" \
                    "${file_data[file_line-1]::-1}${file_data[file_line]}" \
                    "${file_data[@]:file_line+1}" )

        ((file_line--))
        ((total_lines--))

        # If used on the first line of the terminal
        (( terminal_row == 1 )) && {
            printf '\e2K'
            draw_line
        }

        # If used anywhere else. The content below the line
        # where the cursor is would need to be shifted up a line
        (( terminal_row > 1 )) && {
            ((terminal_row--))
            printf '\e[A'

            for ((i=0; i<=max_lines-terminal_row; i++)); do
                draw_line "$((file_line+i))"
                (( i < max_lines-terminal_row )) && printf "\n"
            done
        }

        return
    }

    # If backspace is used anywhere else
    (( file_column > 0 )) && {

        # Add action to undo stack
        add_action_to_undo_stack "BCK" "${file_data[y]:x-1:1}"

        local prev="${file_data[file_line]::file_column-1}"
        local aft="${file_data[file_line]:file_column}"

        file_data[file_line]="$prev$aft"

        ((file_column--))
        ((prev_line_column=file_column))
        printf '\e2K'
        draw_line
        return
    }

}

delete_character() {

    # if delete is used at the end of the line
    (( file_column == ${#file_data[file_line]}-1 )) && {
        ((prev_line_column=file_column))

        (( file_line == total_lines-1 )) && return;

        # Add action to undo stack
        add_action_to_undo_stack "L_J" "DEL"

        file_data=( "${file_data[@]::file_line}" \
                    "${file_data[file_line]::-1}${file_data[file_line+1]}" \
                    "${file_data[@]:file_line+2}" )

        ((total_lines--))

        # if used at the last line of the scroll region
        (( terminal_row == max_lines )) && {
            printf '\e2K'
            draw_line
        }

        # If used anywhere else. The content below the line
        # where the cursor is would need to be shifted up a line
        (( terminal_row < max_lines )) && {
            printf '\e2K'

            for ((i=0; i<=max_lines-terminal_row; i++)); do
                draw_line "$((file_line+i))"
                (( i < max_lines-terminal_row )) && printf "\n"
            done
        }

        return
    }

    # if delete is used anywhere else
    (( file_column < ${#file_data[file_line]}-1 )) && {

        # Add action to undo stack
        add_action_to_undo_stack "DEL" "${file_data[y]:x:1}"

        local fore="${file_data[file_line]::file_column}"
        local aft="${file_data[file_line]:file_column+1}"

        file_data[file_line]="$fore$aft"

        ((prev_line_column=file_column))
        printf '\e2K'
        draw_line
        return
    }
}

tab() {
    local fore="${file_data[file_line]::file_column}"
    local aft="${file_data[file_line]:file_column}"
    file_data[$file_line]="$fore    $aft"
    ((file_column+=4))
    prev_line_column=$file_column
}
# File Handling
###################################################################################################
filename() {
    #* Code yoinked from pure-bash-bible (https://github.com/dylanaraps/pure-bash-bible)
    # Usage: basename "path" ["suffix"]
    local tmp

    tmp=${1%"${1##*[!/]}"}
    tmp=${tmp##*/}
    tmp=${tmp%"${2/"$tmp"}"}

    file_name="${tmp:-/}"
}

check_file() {
    [[ -z "$*" ]] && print_ERR_and_die "[ERR] No file passed"

    [[ ! -a "$*" ]] && print_ERR_and_die "[ERR] File $* does not exist"

    [[ -a $* && ! -r $* ]] && print_ERR_and_die "[ERR] File $* can't be read"

    [[ -a $* && ! -w $* ]] && print_ERR_and_die "[ERR] bte does not have write perms for $*"

    [[ -d $* ]] && print_ERR_and_die "[ERR] File $* is a directory"

}

read_file() {
    # Map $file to array file_data
    mapfile -t file_data < "$file"

    # If file empty
    (( ${#file_data[*]} == 0 )) && {
        file_data=( "" )
    }

    # file line count
    total_lines="${#file_data[*]}"

    # Adding a ' ' to the end of each line to allow
    # editing the last character of a line. The cursor
    # always stays ahead of the point where it modifies
    # Hence to modify the contextually last character of line
    # A ' ' needs to be introduced at the end.
    for (( i=0;i<total_lines;i++ ));do
        file_data[$i]+=" "
    done
}

write_to_file() {
    # Empty $file
    : >"$file"

    # loop used because there is a 
    # trailing whitespace in each line
    for line in "${file_data[@]}"; do
        printf -- '%s\n' "${line:: -1}" >> "$file"
    done

    #set modified to false
    modified=0
}

# Main Functions
###################################################################################################
key() {
    local special_keys

    [[ $1 == $'\e' ]] && {
        special_keys+=${1}

        # \e A
        # \e [ A
        # \e [ 6 ~
        # \e [ 2 0 ~
        # \e [ 1 ; 5~
        # \e [ 1 ; 5C
        # -- - - - --
        #  1 2 3 4 5

        #* read 2
        read "${read_flags[@]}" -srn 1
        special_keys+=${REPLY}

        [[ $REPLY == $'[' ]] && {
            #* read 3
            read "${read_flags[@]}" -srn 1
            special_keys+=${REPLY}

            [[ ${REPLY} == [0-9] ]] && {
                #* read 4
                read "${read_flags[@]}" -srn 1
                special_keys+=${REPLY}

                [[ ${REPLY} == [[:digit:]] ]] && {
                    read "${read_flags[@]}" -srn 1 _
                    special_keys+="~"
                }

                [[ ${REPLY} == ";" ]] && {
                    read "${read_flags[@]}" -srn 2
                    special_keys+=${REPLY}
                }
            }
        }

    }

    case "${special_keys:-$1}" in

        # Text Navigation
        #-=========================================

        # Move Cursor Right
        # 'C' is what bash sees when the right arrow is pressed
        # ('\e[C' or '\eOC').
        "${bte_scroll_right_1:=$'\e[C'}"|\
        "${bte_scroll_right_2:=$'\eOC'}")
            move_right
        ;;

        # Move Cursor Left
        # 'D' is what bash sees when the left arrow is pressed
        # ('\e[D' or '\eOD').
        "${bte_scroll_left_1:=$'\e[D'}"|\
        "${bte_scroll_left_2:=$'\eOD'}")
            move_left
        ;;

        # Scroll up.
        # 'A' is what bash sees when the up arrow is pressed
        # ('\e[A' or '\eOA').
        "${bte_scroll_up_1:=$'\e[A'}"|\
        "${bte_scroll_up_2:=$'\eOA'}")
            move_up
        ;;

        # Scroll down.
        # 'B' is what bash sees when the down arrow is pressed
        # ('\e[B' or '\eOB').
        "${bte_scroll_down_1:=$'\e[B'}"|\
        "${bte_scroll_down_2:=$'\eOB'}")
            move_down
        ;;

        # Go up one page
        "${bte_pgup:=$'\E[5~'}")
            ((file_column=0))
            ((prev_line_column=0))

            (( file_line != 0 )) && {
                if (( page_start == 0 )); then
                    ((file_line=0))
                elif (( page_start >= max_lines )); then
                    (( page_end=page_start ))
                    (( page_start=page_start-max_lines ))
                    (( file_line=page_start+terminal_row-1 ))
                elif (( page_start <= max_lines )); then
                    (( page_start=0 ))
                    (( page_end=max_lines ))

                    (( file_line-max_lines < 0 )) && {
                        (( file_line=0 ))
                        (( terminal_row=1 ))
                    }

                    (( file_line-max_lines >= 0 )) && {
                        (( file_line=file_line-max_lines ))
                    }
                fi

                redraw
            }
        ;;

        # Go down one page
        "${bte_pgdwn:=$'\E[6~'}")
            ((file_column=0))
            ((prev_line_column=0))

            (( file_line != total_lines-1 )) && {
                if (( page_end >= total_lines )); then
                    (( file_line=total_lines-1 ))
                elif (( page_end+max_lines <= total_lines )); then
                    (( page_start=page_end ))
                    (( page_end=page_start+max_lines ))
                    (( file_line=file_line+max_lines ))
                else
                    (( page_start=page_end ))
                    (( page_end=page_start+max_lines ))

                    (( page_start+terminal_row-1 >= total_lines )) && {
                        (( file_line=total_lines-1 ))
                    }

                    (( page_start+terminal_row-1 < total_lines )) && {
                        (( file_line=page_start+terminal_row-1 ))
                    }
                fi

                redraw
            }
        ;;

        # Move to start of line
        "${bte_home_key:=$'\E[1~'}")
            ((file_column=0))
            ((prev_line_column=0))
            draw_line
            sync_cursor
            status_line
        ;;

        # Move to end of line
        "${bte_end_key:=$'\E[4~'}")
            ((file_column=${#file_data[file_line]}))
            ((prev_line_column=${#file_data[file_line]}))
            draw_line
            sync_cursor
            status_line
        ;;

        # Text Editing
        #-=========================================

        # TO instert a newline in the text
        "${bte_newline_key:=""}")
            line_break
            sync_cursor

            modified=1
            status_line
        ;;

        # Backspace to remove a character before the cursor
        "${bte_bckspc_key_1:=$'\b'}"|\
        "${bte_bckspc_key_2:=$'\177'}")
            back_space
            sync_cursor
            modified=1
            status_line
        ;;

        # Delete key to remove the character under the cursor
        "${bte_delete_key:=$'\e[3~'}")
            delete_character
            sync_cursor
            modified=1

            status_line
        ;;
        
        # Tab key to add 4 spaces
        "${bte_tab_key=$'\t'}")
            tab
            draw_line
            sync_cursor
            modified=1

            status_line
        ;;

        # A-Z , a-z , 0-9 and special charcters to insert into
        # the text
        [[:alnum:]] |\
        [[:punct:]] |\
        " ")
            insert_character "$1"
            printf '\e2K'
            draw_line
            sync_cursor
            modified=1
            status_line
        ;;

        # Editor Functionality
        #-=========================================

        "${bte_undo:=$'\Eu'}")
            undo
            sync_cursor
            status_line
        ;;

        "${bte_redo:=$'\Er'}")
            redo
            sync_cursor
            status_line
        ;;

        "${bte_write:=$'\017'}")
            write_to_file
            status_line
        ;;

        # Ctrl+file_column to quit
        "${bte_quit:=$'\030'}")
            exit
        ;;

        # DEBUG Functionality
        #-=========================================

        # F5 key to redraw the current screen
        # Used for debug purposes
        "${bte_redraw:=$'\E[15~'}")
            redraw
        ;;

        "${bte_debug_key:=$'\eD'}")
            printf --      "----------------\n"
            printf --      "undo-stack------\n" >> ~/.bte_debug_log
            printf -- "%s\n" "${undo_stack[@]}" >> ~/.bte_debug_log
            printf --      "redo-stack------\n" >> ~/.bte_debug_log
            printf -- "%s\n" "${redo_stack[@]}" >> ~/.bte_debug_log
            printf --      "----------------\n"
        ;;

    esac
}

init_vars() {
    # setting up variables for position within file
    #
    # file_column      : Denotes the point at which the element is being modififed
    # file_line        : Denotes which element in file_data is being modified
    # terminal_column  : Denotes the COLUMN wise position of the cursor
    #                    within the terminal
    # terminal_row     : Denotes the ROW wise position of the cursor
    #                    within the terminal
    # prev_line_column : This variable is used to denote the farthest the cursor
    #                    has been from the right hand side of the terminal. This
    #                    is used while moving up and down a line.
    #                    (It gets overwritten when moving left or right)
    #                    (Used in draw_page)
    # page_start       : Denotes the file_line value of the line from which a page starts
    # page_end         : Similar to page_start, page_end denotes the file_line value of the line
    #                    at the end of the page
    # mergeable_block  : This variable acts as a flag for adding a new block to the top or merging
    #                    the action/event to the top block of the undo stack.
    #                    0 add a new block to the top of stack
    #                    1 merge with top block
    # undo_stack       : This array variable holds the undo blocks as a stack
    # redo_stack       : This array variable holds the redo blocks as a stack
    # modified         : Acts as a flag to show if the file/buffer has been modified
    #                    in any way or form

    file=""
    file_name=""

    file_data=( " " )

    file_column=0
    file_line=0
    terminal_column=1
    terminal_row=1

    prev_line_column=0

    page_start=0
    page_end=$max_lines

    undo_stack=()
    redo_stack=()
}

main() {
    [[ $1 == -v ]] && {
        printf '%s\n' "BTE 0.2"
        exit
    }

    # To stop read from waiting indefinetly for a character input
    ((BASH_VERSINFO[0] > 3)) &&
        read_flags=(-t 0.5)

    get_term_size
    init_vars

    # check validity of passed file
    check_file "$*"

    file="$*"

    # get the name of the file
    filename "$*"

    # load file onto array file_data
    read_file 

    # Trap the exit signal (we need to reset the terminal to a useable state.)
    trap 'reset_terminal' EXIT

    # Trap the window resize signal (handle window resize events).
    trap 'get_term_size; redraw' WINCH
    
    setup_terminal
    redraw

    # Vintage infinite loop.
    for ((;;)); {
        read "${read_flags[@]}" -srn 1 && key "$REPLY"

        # Exit if there is no longer a terminal attached.
        [[ -t 1 ]] || exit 1
    }
}

main "$@"
